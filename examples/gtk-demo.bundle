<?xml version="1.0" standalone="no"?> <!--*- mode: xml -*-->
<app-bundle>

  <meta>
    <!-- Where to pick up the GTK+ installation, icon themes,
         etc. Note that "${env:JHBUILD_PREFIX}" is evaluated to the
         value of the environment variable JHBUILD_PREFIX. You can
         define additional prefixes and refer to them in paths
         throughout this file on the form "${prefix:name}". This is
         useful for installing certain libraries or even the
         application itself separately. Note that JHBUILD_PREFIX is
         defined by jhbuild, so it you are not using jhbuild you can
         either define your own or just hardcode the path here.
    -->
    <prefix name="default">${env:JHBUILD_PREFIX}</prefix>

    <!-- The project directory is the default location of the created
         app. If you leave out the path, the current directory is
         used. Note the usage of an environment variable here again.
    -->
    <destination overwrite="yes">${env:HOME}/Desktop</destination>

    <!-- Comment this out to keep the install names in binaries -->
    <run-install-name-tool/>
 
    <!-- Optionally specify a launcher script to use. If the
         application sets up everything needed itself, like
         environment variable, linker paths, etc, a launcher script is
         not needed. If the source path is left out, the default
	 script will be used.

         This example uses python-launcher.c (see the comment at
         main-binary below), so there's no launcher script.
    -->
    <!--launcher-script>${project}/launcher.sh</launcher-script -->

    <!-- Indicate the active gtk version to use. This is needed only
         for gtk+-3.0 projects. -->
    <gtk>gtk+-2.0</gtk>
  </meta>

  <!-- The special macro "${project}" refers to the directory where
       this bundle file is located. The application name and bundle
       identifier are taken from the plist file.
  -->
  <plist>${project}/Info-gtk-demo.plist</plist>
  <!-- Build gtk-demo-launcher with:
          gcc -L$PREFIX `python-config --cflags --ldflags` \
              -o $PREFIX/bin/gramps-launcher \
	      path/to/gtk-mac-bundler/examples/python-launcher.c
       with the obvious substitution.
  -->

  <main-binary>
    ${prefix}/bin/gtk-demo-launcher
  </main-binary>

  <!-- Copy in GTK+ modules.  Note the ${gtkdir} macro, which expands
       to the correct library subdirectory for the specified gtk
       version.
  -->
  <binary>
     ${prefix}/lib/${gtkdir}/modules/*.so
  </binary>

  <!-- Copy in GTK+ theme engines and print backends. Note the use of the
       "${pkg:module:variable}" macro, which evaluates to a pkg-config
       variable in the specified module. Note that any libraries that
       binaries link to are also copied in automatically.  Note also
       the included ${gtk} macro, which gets the correct package name
       to get. -->
  <binary>
    ${prefix}/lib/${gtkdir}/${pkg:${gtk}:gtk_binary_version}/engines/*.so
  </binary>

  <binary>
    ${prefix}/lib/${gtkdir}/${pkg:${gtk}:gtk_binary_version}/printbackends/*.so
  </binary>

<!-- Starting with 2.24, gdk-pixbuf installs into its own directory. -->
  <binary>
    ${prefix}/lib/gdk-pixbuf-2.0/${pkg:${gtk}:gtk_binary_version}/loaders/*.so
  </binary>

<!-- No longer needed for pango >= 1.38
   <binary>
    ${prefix}/lib/pango/${pkg:pango:pango_module_version}/modules/
  </binary>
-->

<!--
    If your application uses dopen() or dlopen to add modules then you
    may need to specify those modules. If you're bundling a scripted
    language (e.g. Python) application you'll need to specify any
    compiled Pyton extensions you need. gtk-mac-bundler will examine
    your main-binary and any other binaries to specify for
    dependencies and will add them automatically.

    Two layouts of binaries are supported. The original layout
    duplicates the installation layout in Contents/Resources:
    executables (except for the main binary, which goes into
    Contents/MacOS) go into Contents/Resources/bin, libraries and
    loadable modules go into Contents/Resources/lib, and so on. This
    doesn't comply with Apple's guidelines for code-signing
    (https://developer.apple.com/library/content/technotes/tn2206/_index.html#//apple_ref/doc/uid/DTS40007919-CH1-TNTAG201),
    which require that mach-o executables *not* go into
    Contents/Resources. Shared libraries are supposed to go into
    Contents/Frameworks, loadable modules into Contents/Plugins, and
    executables into Contents/Helpers.

    Which layout gtk-mac-bundler produces is controlled by the
    elements that you use to specify additional binaries: The default
    is "original", and for that you specify all of your binaries in
    <binary> elements. If you have no additional binaries the
    dependencies will be placed in Contents/Resources/lib. For the new
    layout three new elements are provided: <library>, <loadable>, and
    <helper>, for shared libraries (foo.dylib), loadable modules
    (foo.so), and executables (usually no extension on Unix).

    The two layouts are mutually exclusive. If your bundle file has
    both binary and any of the other tags gtk-mac-bundler will quit
    with an error.
-->
<!-- GObject-introspection based projects require typelibs for
     connecting the C-based shared libraries with their language
     bindings. These are compiled from GObject-Introspection (.gir)
     files, in turn made by g-ir-scanner. g-ir-scanner embeds the
     install_name from the library in the gir file, normally an
     absolute path at build time. We need to change it to the
     install_name for the bundle, beginning with @executable_path. We
     do that by importing and modifying the gir files then recompiling
     them. It's possible to specify only the gir files you need but in
     most serious programs that works out to a rather long list so
     it's better to just use a wildcard.
     <gir>
       ${prefix}/share/gir-1.0/*.gir
     </gir>
     -->

  <data>
    ${prefix}/etc/pango/
  </data>

 <!-- Translation filenames, one for each program or library that you
       want to copy in to the bundle. The "dest" attribute is
       optional, as usual. Bundler will find all translations of that
       library/program under the indicated directory and copy them.-->
  <translations name="gtk20">
    ${prefix}/share/locale
  </translations>


  <!-- Data to copy in, usually Glade/UI files, images, sounds files
       etc. The destination inside the bundle can be specified if the
       files should end up at a different location, by using the
       "dest" property. The destination must then start with the macro
       "${bundle}", which refers to the bundle root directory.
  -->
  <!-- data>
    ${prefix}/share/gtk-demo
  </data -->

  <!-- Copy in the themes data. You may want to trim this to save space
       in your bundle. -->
  <data>
    ${prefix}/share/themes
  </data>

  <!-- Copy icons. Note that the .icns file is an Apple format which
       contains up to 4 sizes of icon. You can use
       /Developer/Applications/Utilities/Icon Composer.app to import
       artwork and create the file. >
  <data dest="${bundle}/Contents/Resources">
    ${project}/Giggle.icns
  </data -->

  <!-- This is where theme commands go. You can copy them in from your
       theme of choice if they provide and example, or you can just
       change the source path. -->

  <data dest="${bundle}/Contents/Resources/etc/${gtkdir}/gtkrc">
    ${project}/gtkrc
  </data>

  <!-- Icon themes to copy. The "icons" property can be either of
       "auto", "all", or "none". All or none should be
       self-explanatory, while auto means that the script will try to
       figure out which icons are needed. This is done by getting all
       the strings from all copied binaries, and matching them against
       icon names. To be safe, you should use "all". "none" is useful
       if you want just the index.theme file but no icons, mostly
       needed for the "hicolor" base theme.

  <icon-theme icons="auto">
    Tango
  </icon-theme -->

</app-bundle>
